<?php

/*·************************************************************************
 * Copyright ©2007-2012 Pieter van Beek, Almere, The Netherlands
 *         <http://purl.org/net/6086052759deb18f4c0c9fb2c3d3e83e>
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at <http://www.apache.org/licenses/LICENSE-2.0>
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **************************************************************************/

/**
 * File documentation (who cares)
 * @package BeeHub
 */

//DAV::header(array('X-My-Header' => 'My Value'));
//exit();

//phpinfo(); exit;
//ob_start("ob_gzhandler");

//header("Transfer-Encoding: chunked");
//header("Content-Type: text/plain; charset=US-ASCII");
//flush();
//echo "5\r\nhello\r\n0\r\n\r\nX-Trail: yes\r\n";
//flush();
//exit();

require_once dirname( dirname(__FILE__) ) . '/webdav-php/lib/dav.php';

//DAV::debug('started!');

/**
 * A MySQL exception
 * @package BeeHub
 */
class BeeHub_MySQL extends Exception {}

/**
 * A deadlock occured: Try again.
 * @package BeeHub
 */
class BeeHub_Deadlock extends BeeHub_MySQL {}

/**
 * Out of resources: maybe later.
 * @package BeeHub
 */
class BeeHub_Timeout extends BeeHub_MySQL {}


/**
 * Just a namespace.
 * @package BeeHub
 */
class BeeHub {


// const REALM = 'BeeHub';
// const USERS_PATH = '/users/';
// const GROUPS_PATH = '/groups/';
// const WHEEL_PATH = '/users/admin';


// const PRIV_READ_PROPERTIES = 'http://beehub.nl/ read-properties';
// const PRIV_READ_CONTENT    = 'http://beehub.nl/ read-content';

// const PROP_PASSWD          = 'http://beehub.nl/ passwd';

const DATADIR = '/space/beehub/data';


/**
 * A better escapeshellarg.
 * The default PHP version seems not to work for UTF-8 strings...
 * @return string
 * @param string $arg
 */
public static function escapeshellarg($arg) {
  return "'" . str_replace( "'", "'\\''", $arg ) . "'";
}


public static function localPath($path) {
//  $path = DAV::unslashify('root' . $path);
//  $path = str_replace('#', '##', $path);
  return DAV::unslashify( DATADIR . rawurldecode( $path ) );
}


/**
 * @var mysqli
 */
private static $MYSQLI = null;
/**
 * @return mysqli
 * @throws DAV_Status
 */
public static function mysqli() {
  if (self::$MYSQLI === null) {
    require(dirname(dirname(__FILE__)) . DIRECTORY_SEPARATOR . 'config.php');
    self::$MYSQLI = new mysqli( $host, $username, $password, $database );
    // self::$MYSQLI = new mysqli(
      // 'localhost', 'wordpress', 'wordpress', 'wordpress'
    // );
    if ( !self::$MYSQLI )
      throw new BeeHub_MySQL(mysqli_connect_error(), mysqli_connect_errno());
  }
  return self::$MYSQLI;
}


public static function escape_string($string) {
  return is_null($string)
    ? 'NULL'
    : '\'' . self::mysqli()->escape_string($string) . '\'';
}


public static function ETag($etag = null) {
  if (is_null($etag)) {
    self::query('INSERT INTO ETag VALUES();');
    $etag = self::mysqli()->insert_id;
    if (!($etag % 100))
      self::query("DELETE FROM ETag WHERE etag < $etag");
  }
  return '"' . trim( base64_encode( pack( 'H*', dechex( $etag ) ) ), '=' ) . '"';
}


/**
 * @param string $query
 * @return void
 * @throws BeeHub_Deadlock|BeeHub_Timeout|BeeHub_MySQL
 */
public static function real_query($query) {
  if (! self::mysqli()->real_query($query)) {
    if (self::mysqli()->errno == 1213)
      throw new BeeHub_Deadlock(self::mysqli()->error);
    if (self::mysqli()->errno == 1205)
      throw new BeeHub_Timeout(self::mysqli()->error);
    throw new BeeHub_MySQL( self::mysqli()->error, self::mysqli()->errno );
  }
}


/**
 * @param string $query
 * @return mysqli_result
 * @throws Exception
 */
public static function query($query) {
  if ( !( $retval = self::mysqli()->query($query) ) ) {
    if (self::mysqli()->errno == 1213)
      throw new BeeHub_Deadlock(self::mysqli()->error);
    if (self::mysqli()->errno == 1205)
      throw new BeeHub_Timeout(self::mysqli()->error);
    throw new BeeHub_MySQL( self::mysqli()->error, self::mysqli()->errno );
  }
  return $retval;
}


/**
 * @return string a uuid, generated by MySQL
 */
public static function uuid() {
  $result = self::query('SELECT UUID();');
  $row = $result->fetch_row();
  return $row[0];
}


/**
 * @todo implement
 */
public static function current_user() {}


/*
 * @param array $aces
 * @return string json
 */
// public static function aces2json($aces) {
  // $json = array();
  // foreach ($aces as $ace)
    // $json[] = array(
      // $ace->principal, $ace->invert, $ace->privileges, $ace->deny
    // );
  // return json_encode($json);
// }


/*
 * @param string $json
 * @return array
 */
// public static function json2aces($json) {
  // if ( !( $json = json_decode($json, true) ) )
    // return array();
  // $retval = array();
  // foreach ($json as $ace)
    // $retval[] = new DAVACL_Element_ace(
      // $ace[0], $ace[1], $ace[2], $ace[3]
    // );
  // return $retval;
// }


// public static function best_xhtml_type() {
  // return ( false === strstr(@$_SERVER['HTTP_USER_AGENT'], 'MSIE') &&
           // false === strstr(@$_SERVER['HTTP_USER_AGENT'], 'Microsoft') ) ?
    // 'application/xhtml+xml' : 'text/html';
// }


/*
 * Handles method spoofing.
 * 
 * Callers should use this method as one of the first methods in their
 * scripts. This method does the following:
 * - The <em>real</em> HTTP method must be POST.
 * - Modify "environment variables" <var>$_SERVER['QUERY_STRING']</var>,
 *   <var>$_SERVER['REQUEST_URI']</var>,
 *   <var>$_SERVER['REQUEST_METHOD']</var>,
 *   <var>$_SERVER['CONTENT_LENGTH']</var>,
 *   <var>$_SERVER['CONTENT_TYPE']</var> as necessary.
 * @return void
 */
// public static function handle_method_spoofing() {
  // $_SERVER['ORIGINAL_REQUEST_METHOD'] = $_SERVER['REQUEST_METHOD'];
  // if ($_SERVER['REQUEST_METHOD'] == 'POST' and
      // isset($_GET['_method'])) {
    // $http_method = strtoupper( $_GET['_method'] );
    // unset( $_GET['_method'] );
    // if ( $http_method === 'GET' &&
         // strstr( @$_SERVER['CONTENT_TYPE'],
                 // 'application/x-www-form-urlencoded' ) !== false ) {
      // $_GET = $_POST;
      // $_POST = array();
    // }
    // $_SERVER['QUERY_STRING'] = http_build_query($_GET);
    // $_SERVER['REQUEST_URI'] =
      // substr( $_SERVER['REQUEST_URI'], 0,
              // strpos( $_SERVER['REQUEST_URI'], '?' ) );
    // if ($_SERVER['QUERY_STRING'] != '')
      // $_SERVER['REQUEST_URI'] .= '?' . $_SERVER['QUERY_STRING'];
    // $_SERVER['REQUEST_METHOD'] = $http_method;
  // }
// }


// function to parse the http auth header
#public static function http_digest_parse($txt)
#{
#  $needed_parts = array('nonce'=>1, 'nc'=>1, 'cnonce'=>1, 'qop'=>1, 'username'=>1, 'uri'=>1, 'response'=>1);
#  $data = array();
#  $keys = implode('|', array_keys($needed_parts));
#
#  preg_match_all(
#    '@(' . $keys . ')=(\'[^\']+\'|"[^"]+"|[^\'"\\s,][^\\s,]*)@',
#    $txt, $matches, PREG_SET_ORDER
#  );
#  foreach ($matches as $m) {
#    if ("'" == $m[2][0] || '"' == $m[2][0])
#      $m[2] = substr($m[2], 1, -1);
#    $data[$m[1]] = $m[2];
#    unset($needed_parts[$m[1]]);
#  }
#
#  return $needed_parts ? false : $data;
#}


} // class BeeHub
